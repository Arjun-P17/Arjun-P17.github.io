{"version":3,"sources":["main.7797a697.chunk.css","webpack://src/components/Navbar/navbar.scss","webpack://src/components/Header/header.scss","webpack://src/styles/include-media.scss","webpack://src/components/atoms/card.scss","webpack://src/components/Work/work.scss","webpack://src/components/About/about.scss","webpack://src/components/Skills/skills.scss","webpack://src/components/Promotion/promotion.scss","webpack://src/components/Footer/footer.scss","webpack://src/pages/home.scss"],"names":[],"mappings":"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","file":"main.7797a697.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Open+Sans&display=swap);\n.navbar-wrapper{width:80vw;margin-top:10vh;display:flex;align-items:center;justify-content:space-between}.navbar-wrapper .name{font-weight:600;font-size:1.5rem}.navbar-wrapper .links-wrapper button{text-decoration:none;padding:10px;font-family:\"Open Sans\";opacity:0.6;transition:all 0.2s ease-in-out;font-size:1rem;background-color:transparent;outline:none;border:0px;cursor:pointer}.navbar-wrapper .links-wrapper button:hover{opacity:1}.navbar-wrapper .links-wrapper .active{color:black}\n\n.header-wrapper{width:80vw;margin-top:10vh;display:flex;flex-direction:column;align-items:center}.header-wrapper h2{font-size:1rem;text-align:center}@media (min-width: 320px) and (max-width: 424px){.header-wrapper h2{font-size:14px}}@media (min-width: 425px) and (max-width: 767px){.header-wrapper h2{font-size:16px}}@media (min-width: 768px) and (max-width: 1023px){.header-wrapper h2{font-size:16px}}.header-wrapper .heading-wrapper h1{font-size:4rem;text-align:center;line-height:20px}@media (min-width: 320px) and (max-width: 424px){.header-wrapper .heading-wrapper h1{font-size:1.5rem;line-height:10px}}@media (min-width: 425px) and (max-width: 767px){.header-wrapper .heading-wrapper h1{font-size:1.5rem;line-height:10px}}@media (min-width: 768px) and (max-width: 1023px){.header-wrapper .heading-wrapper h1{font-size:2.5rem}}.header-wrapper p{width:50%;text-align:center;overflow:hidden}@media (min-width: 320px) and (max-width: 424px){.header-wrapper p{font-size:12px;width:100%}}@media (min-width: 425px) and (max-width: 767px){.header-wrapper p{font-size:12px;width:100%}}@media (min-width: 768px) and (max-width: 1023px){.header-wrapper p{font-size:14px;width:100%}}\n\n.card{width:100%;height:250px;overflow:hidden !important;display:flex;align-items:center;justify-content:center;background-size:cover;background-repeat:no-repeat;background-position:center}.card .content{font-family:\"Open Sans\";text-align:center;padding:10px;opacity:0;transition:all 500ms ease-in-out;-webkit-transform:translate(0, 20px);transform:translate(0, 20px);cursor:pointer}.card .content h1{font-size:14px;color:white}.card .content p{font-size:10px;color:white;margin-bottom:20px}.card .content .btn{background-color:black;color:white;padding:10px;text-decoration:none}.card .content:hover{opacity:1;-webkit-transform:translate(0, 0px);transform:translate(0, 0px)}\n\n.work-wrapper{width:80vw;margin-top:10vh;display:flex;flex-direction:column;align-items:center}.work-wrapper h1{font-size:3rem;line-height:20px}.work-wrapper .grid{display:grid;margin-top:20px;grid-template-columns:repeat(3, 1fr);grid-gap:10px}@media (min-width: 320px) and (max-width: 424px){.work-wrapper .grid{grid-template-columns:1fr}}@media (min-width: 425px) and (max-width: 767px){.work-wrapper .grid{grid-template-columns:1fr}}@media (min-width: 768px) and (max-width: 1023px){.work-wrapper .grid{grid-template-columns:1fr 1fr}}\n\n.about-section{width:80vw;margin-top:10vh;display:flex;justify-content:space-between}@media (min-width: 320px) and (max-width: 424px){.about-section{flex-direction:column-reverse}}@media (min-width: 425px) and (max-width: 767px){.about-section{flex-direction:column-reverse}}@media (min-width: 768px) and (max-width: 1023px){.about-section{flex-direction:column-reverse;align-items:center}}.about-section .content{width:50%;height:400px;display:flex;flex-direction:column;justify-content:center;align-items:center}@media (min-width: 320px) and (max-width: 424px){.about-section .content{width:100%}}@media (min-width: 425px) and (max-width: 767px){.about-section .content{width:100%}}@media (min-width: 768px) and (max-width: 1023px){.about-section .content{width:100%}}.about-section .content h1{font-size:3rem;line-height:20px}@media (min-width: 768px) and (max-width: 1023px){.about-section .content h1{text-align:center}}@media (min-width: 768px) and (max-width: 1023px){.about-section .content p{text-align:center}}.about-section .image-wrapper{width:50%;height:400px;display:flex;align-items:center;justify-content:center;overflow:hidden}@media (min-width: 320px) and (max-width: 424px){.about-section .image-wrapper{width:100%}}@media (min-width: 425px) and (max-width: 767px){.about-section .image-wrapper{width:100%}}@media (min-width: 768px) and (max-width: 1023px){.about-section .image-wrapper{width:100%}}.about-section .image-wrapper img{height:100%;width:100%;object-fit:contain}\n\n.skills-container{width:80vw;margin-top:10vh;display:flex;flex-direction:column;align-items:center}.skills-container h1{font-size:3rem;line-height:20px}.skills-container .skills-grid{display:grid;grid-template-columns:repeat(3, 1fr);margin-top:50px;grid-gap:20px}@media (min-width: 320px) and (max-width: 424px){.skills-container .skills-grid{grid-template-columns:1fr}}@media (min-width: 425px) and (max-width: 767px){.skills-container .skills-grid{grid-template-columns:1fr}}@media (min-width: 768px) and (max-width: 1023px){.skills-container .skills-grid{grid-template-columns:1fr 1fr}}.skills-container .skills-grid .skill{display:flex;flex-direction:column;align-items:center;text-align:center}.skills-container .skills-grid .skill img{height:3rem}.skills-container .skills-grid .skill p{font-size:14px}\n\n.promotion-container{width:80vw;margin-top:10vh;display:flex;flex-direction:column;align-items:center;text-align:center}.promotion-container h1{font-size:3rem;line-height:20px}\n\n.footer-container{width:80vw;margin-top:10vh;margin-bottom:10vh;display:flex;flex-direction:column;align-items:center}.footer-container h1{font-size:3rem;line-height:20px}.footer-container h2{font-size:1.5rem;overflow:hidden}@media (min-width: 320px) and (max-width: 424px){.footer-container h2{display:none}}@media (min-width: 425px) and (max-width: 767px){.footer-container h2{font-size:14px}}@media (min-width: 768px) and (max-width: 1023px){.footer-container h2{font-size:1.2rem}}.footer-container .email-link{font-size:1.5rem;color:black}.footer-container .social-icons{margin-top:20px}.footer-container .social-icons img{height:2rem;margin:10px}.footer-container span{margin-top:10px}.footer-container icon{color:red}\n\n*{font-family:\"Montserrat\"}body{margin:0;padding:0;overflow-y:scroll;overflow-x:hidden}.section{width:100vw;height:auto;overflow:hidden}.container{width:100%;height:100%;display:flex;flex-direction:column;align-items:center;justify-content:center}.primary-btn{margin:10px;padding:10px;background-color:black;color:white;border:0px;transition:all 0.2s ease-in-out;text-decoration:none;cursor:pointer}.primary-btn:hover{-webkit-transform:scale(1.1);transform:scale(1.1)}\n\n","@import \"../../styles/include-media.scss\";\n\n.navbar-wrapper {\n   width: 80vw;\n   margin-top: 10vh;\n   display: flex;\n   align-items: center;\n   justify-content: space-between;\n   .name {\n      font-weight: 600;\n      font-size: 1.5rem;\n   }\n   .links-wrapper {\n      button {\n         text-decoration: none;\n         padding: 10px;\n         font-family: \"Open Sans\";\n         opacity: 0.6;\n         transition: all 0.2s ease-in-out;\n         font-size: 1rem;\n         background-color: transparent;\n         outline: none;\n         border: 0px;\n         cursor: pointer;\n         &:hover {\n            opacity: 1;\n         }\n      }\n      .active {\n         color: black;\n      }\n   }\n}\n","@import \"../../styles/include-media.scss\";\n\n.header-wrapper {\n   width: 80vw;\n   margin-top: 10vh;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n\n   h2 {\n      font-size: 1rem;\n      text-align: center;\n      @include media(\">=phone\", \"<lgphone\") {\n         font-size: 14px;\n      }\n      @include media(\">=lgphone\", \"<tablet\") {\n         font-size: 16px;\n      }\n      @include media(\">=tablet\", \"<desktop\") {\n         font-size: 16px;\n      }\n   }\n   .heading-wrapper {\n      h1 {\n         font-size: 4rem;\n         text-align: center;\n         line-height: 20px;\n         @include media(\">=phone\", \"<lgphone\") {\n            font-size: 1.5rem;\n            line-height: 10px;\n         }\n         @include media(\">=lgphone\", \"<tablet\") {\n            font-size: 1.5rem;\n            line-height: 10px;\n         }\n         @include media(\">=tablet\", \"<desktop\") {\n            font-size: 2.5rem;\n         }\n      }\n   }\n   p {\n      width: 50%;\n      text-align: center;\n      overflow: hidden;\n      @include media(\">=phone\", \"<lgphone\") {\n         font-size: 12px;\n         width: 100%;\n      }\n      @include media(\">=lgphone\", \"<tablet\") {\n         font-size: 12px;\n         width: 100%;\n      }\n      @include media(\">=tablet\", \"<desktop\") {\n         font-size: 14px;\n         width: 100%;\n      }\n   }\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  \"phone\": 320px,\n  \"lgphone\": 425px,\n  \"tablet\": 768px,\n  \"desktop\": 1024px,\n  \"smdesktop\": 1280px,\n  \"mddesktop\": 1440px,\n  \"lgdesktop\": 1920px,\n  \"4k\": 2560px,\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"landscape\": \"(orientation: landscape)\",\n  \"portrait\": \"(orientation: portrait)\",\n  \"retina2x\":\n    \"(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)\",\n  \"retina3x\":\n    \"(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)\",\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1,\n  \"\": 0,\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: \"desktop\" !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: (\"screen\", \"portrait\", \"landscape\") !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists(\"at-error\") {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {\n  }\n}\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {\n}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log(\"`#{$im-no-media-breakpoint}` is not a valid breakpoint.\") {\n    }\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == \"max\" and $value <= $no-media-breakpoint-value) or\n        ($prefix == \"min\" and $value > $no-media-breakpoint-value)\n      {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in (\">=\", \">\", \"<=\", \"<\", \"≥\", \"≤\") {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log(\"No operator found in `#{$expression}`.\");\n}\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: \"width\";\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index((\"<\", \"<=\", \"≤\"), $operator), \"max\", \"min\");\n}\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log(\"Unknown unit `#{unit($value)}`.\");\n  }\n\n  @if $operator == \">\" {\n    $value: $value + $interval;\n  } @else if $operator == \"<\" {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return \"(#{$prefix}-#{$dimension}: #{$value})\";\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == \"number\" {\n    @return $value;\n  } @else if type-of($value) != \"string\" {\n    $_: im-log(\"Value for `to-number` should be a number or a string.\");\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == \"-\");\n  $numbers: (\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n  );\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == \"+\" or $first-character == \"-\") {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not(index(map-keys($numbers), $character) or $character == \".\") {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\n    }\n\n    @if $character == \".\" {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: (\n    \"px\": 1px,\n    \"cm\": 1cm,\n    \"mm\": 1mm,\n    \"%\": 1%,\n    \"ch\": 1ch,\n    \"pc\": 1pc,\n    \"in\": 1in,\n    \"em\": 1em,\n    \"rem\": 1rem,\n    \"pt\": 1pt,\n    \"ex\": 1ex,\n    \"vw\": 1vw,\n    \"vh\": 1vh,\n    \"vmin\": 1vmin,\n    \"vmax\": 1vmax,\n  );\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log(\"Invalid unit `#{$unit}`.\");\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge(\n    $media-expressions,\n    $tweak-media-expressions\n  ) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\n  {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","@import \"../../styles/include-media.scss\";\n\n.card {\n   width: 100%;\n   height: 250px;\n   overflow: hidden !important;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n   background-size: cover;\n   background-repeat: no-repeat;\n   background-position: center;\n\n   .content {\n      font-family: \"Open Sans\";\n      text-align: center;\n      padding: 10px;\n      opacity: 0;\n      transition: all 500ms ease-in-out;\n      transform: translate(0, 20px);\n      cursor: pointer;\n      h1 {\n         font-size: 14px;\n         color: white;\n      }\n      p {\n         font-size: 10px;\n         color: white;\n         margin-bottom: 20px;\n      }\n\n      .btn {\n         background-color: black;\n         color: white;\n         padding: 10px;\n         text-decoration: none;\n      }\n      &:hover {\n         opacity: 1;\n         transform: translate(0, 0px);\n      }\n   }\n}\n","@import \"../../styles/include-media.scss\";\n\n.work-wrapper {\n   width: 80vw;\n   margin-top: 10vh;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   h1 {\n      font-size: 3rem;\n      line-height: 20px;\n   }\n   .grid {\n      display: grid;\n      margin-top: 20px;\n      grid-template-columns: repeat(3, 1fr);\n      grid-gap: 10px;\n      @include media(\">=phone\", \"<lgphone\") {\n         grid-template-columns: 1fr;\n      }\n      @include media(\">=lgphone\", \"<tablet\") {\n         grid-template-columns: 1fr;\n      }\n      @include media(\">=tablet\", \"<desktop\") {\n         grid-template-columns: 1fr 1fr;\n      }\n   }\n}\n","@import \"../../styles/include-media.scss\";\n\n.about-section {\n   width: 80vw;\n   margin-top: 10vh;\n   display: flex;\n   justify-content: space-between;\n   @include media(\">=phone\", \"<lgphone\") {\n      flex-direction: column-reverse;\n   }\n   @include media(\">=lgphone\", \"<tablet\") {\n      flex-direction: column-reverse;\n   }\n   @include media(\">=tablet\", \"<desktop\") {\n      flex-direction: column-reverse;\n      align-items: center;\n   }\n   .content {\n      width: 50%;\n      height: 400px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      @include media(\">=phone\", \"<lgphone\") {\n         width: 100%;\n      }\n      @include media(\">=lgphone\", \"<tablet\") {\n         width: 100%;\n      }\n      @include media(\">=tablet\", \"<desktop\") {\n         width: 100%;\n      }\n\n      h1 {\n         font-size: 3rem;\n         line-height: 20px;\n         @include media(\">=tablet\", \"<desktop\") {\n            text-align: center;\n         }\n      }\n      p {\n         @include media(\">=tablet\", \"<desktop\") {\n            text-align: center;\n         }\n      }\n   }\n   .image-wrapper {\n      width: 50%;\n      height: 400px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      overflow: hidden;\n      @include media(\">=phone\", \"<lgphone\") {\n         width: 100%;\n      }\n      @include media(\">=lgphone\", \"<tablet\") {\n         width: 100%;\n      }\n      @include media(\">=tablet\", \"<desktop\") {\n         width: 100%;\n      }\n\n      img {\n         height: 100%;\n         width: 100%;\n         object-fit: contain;\n      }\n   }\n}\n","@import \"../../styles/include-media.scss\";\n\n.skills-container {\n   width: 80vw;\n   margin-top: 10vh;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   h1 {\n      font-size: 3rem;\n      line-height: 20px;\n   }\n\n   .skills-grid {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      margin-top: 50px;\n      grid-gap: 20px;\n      @include media(\">=phone\", \"<lgphone\") {\n         grid-template-columns: 1fr;\n      }\n      @include media(\">=lgphone\", \"<tablet\") {\n         grid-template-columns: 1fr;\n      }\n      @include media(\">=tablet\", \"<desktop\") {\n         grid-template-columns: 1fr 1fr;\n      }\n      .skill {\n         display: flex;\n         flex-direction: column;\n         align-items: center;\n         text-align: center;\n         img {\n            height: 3rem;\n         }\n         p {\n            font-size: 14px;\n         }\n      }\n   }\n}\n","@import \"../../styles/include-media.scss\";\n\n.promotion-container {\n   width: 80vw;\n   margin-top: 10vh;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   text-align: center;\n   h1 {\n      font-size: 3rem;\n      line-height: 20px;\n   }\n}\n","@import \"../../styles/include-media.scss\";\n\n.footer-container {\n   width: 80vw;\n   margin-top: 10vh;\n   margin-bottom: 10vh;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   h1 {\n      font-size: 3rem;\n      line-height: 20px;\n   }\n   h2 {\n      font-size: 1.5rem;\n      overflow: hidden;\n      @include media(\">=phone\", \"<lgphone\") {\n         display: none;\n      }\n      @include media(\">=lgphone\", \"<tablet\") {\n         font-size: 14px;\n      }\n      @include media(\">=tablet\", \"<desktop\") {\n         font-size: 1.2rem;\n      }\n   }\n   .email-link {\n      font-size: 1.5rem;\n      color: black;\n   }\n   .social-icons {\n      margin-top: 20px;\n      img {\n         height: 2rem;\n         margin: 10px;\n      }\n   }\n   span {\n      margin-top: 10px;\n   }\n   icon {\n      color: red;\n   }\n}\n","@charset \"utf-8\";\n@import url(\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Open+Sans&display=swap\");\n\n* {\n   font-family: \"Montserrat\";\n}\n\nbody {\n   margin: 0;\n   padding: 0;\n   overflow-y: scroll;\n   overflow-x: hidden;\n}\n\n.section {\n   width: 100vw;\n   height: auto;\n   overflow: hidden;\n}\n\n.container {\n   width: 100%;\n   height: 100%;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n}\n\n.primary-btn {\n   margin: 10px;\n   padding: 10px;\n   background-color: black;\n   color: white;\n   border: 0px;\n   transition: all 0.2s ease-in-out;\n   text-decoration: none;\n   cursor: pointer;\n   &:hover {\n      transform: scale(1.1);\n   }\n}\n"]}